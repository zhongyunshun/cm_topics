Multi‐objective particle swarm optimization for construction time‐cost tradeoff problems
To cite this article: Hong Zhang & Heng Li (2010) Multi‐objective particle swarm optimization for construction time‐cost tradeoff problems, Construction Management and Economics, 28: 1, 75-88, DOI: 10.1080/01446190903406170
To link to this article:
Full Terms & Conditions of access and use can be found at
Construction Management and Economics (Janaury 2010) 28, 75–88
Multi-objective particle swarm optimization for construction time–cost tradeoff problems
HONG ZHANG1* and HENG LI2 1 School of Civil Engineering, Shenzhen University, Nanhai Ave 3688, Shenzhen, China
2 Department of Building and Real Estate, The Hong Kong Polytechnic University, Hung Hom, Kowloon, Hong Kong
Taylor and FrancisReceived 3 April 2009; accepted 11 October 2009
Reduction in construction project duration is generally linked to additional cost due to more expensive resources required. Hence tradeoff between time and cost is crucial to the efficiency of a construction project. The time-cost tradeoff (TCT) issue has been studied through various multi-objective optimization methodologies to determine an optimal set of activity methods with the objectives of minimizing project duration and total cost. A multi-objective particle swarm optimization that adopts a combined scheme for determining the global best of each particle is presented for solving the TCT problem. The candidate TCT solutions in terms of a set of construction methods for activities are represented through the multidimensional particles. The framework of the combined scheme-based multi-objective particle swarm optimization (CSMOPSO) is developed. Computational analyses are conducted to investigate the performance of the CSMOPSO, including comparison with other methods. This study is expected to provide an alternative solving methodology for the TCT problem and help contractors or engineers plan construction methods with optimal time–cost tradeoff.
Time–cost tradeoff, multi-objective optimization, particle swarm optimization (PSO), construction methods.
Introduction
Being the commonly used methods for construction project scheduling, the critical path method (CPM) and resource-constrained project scheduling (RCPS) approach have serious limitations in reflecting the competitive environment of the construction industry. The CPM assumes unlimited resources and is unable to consider project duration reduction. Both the CPM and RCPS approaches could not handle the issue of cost reduction. In addition to reducing project duration to meet a specific deadline, reduction of cost in the pursuit of higher profit is also desirable. Hence, reduction of both time and cost has become the major criterion for evaluating the performance of a construction project.
In general, the less expensive resources or technologies would lead to longer duration to complete an activity. For example, using more productive resources or technologies (e.g. using more efficient equipment, hiring more workers or adopting overtime) may save time, but the cost may rise. An appropriate balance or tradeoff between duration and cost is able to enhance the efficiency of a construction project. Therefore, the issue of minimizing both project duration and cost has become a time–cost tradeoff (TCT) problem that addresses how to determine a set of optimal solutions, i.e. construction methods for all activities, which correspond to various projects’ duration and cost. To search for optimal solutions for TCT problems is difficult and time-consuming when the numbers of activities and construction methods are very large. What this paper addresses is a new methodology to search for solutions of the TCT problems.
*Author for correspondence. sdzhangh@szu.edu.cn
Construction Management and Economics
ISSN 0144-6193 print/ISSN 1466-433X online © 2010 Taylor & Francis
Many attempts have been made to solve the TCT problem. These attempts adopt, in general, three types of techniques, i.e. heuristic methods, mathematical methods and evolutionary techniques such as genetic algorithm (GA). The heuristic methods depend on the rules of thumb, other than the exact mathematical models. The examples of the heuristic methods for solving the TCT problem include the work of Prager (1963), Siemens (1971) and Moselhi (1993). The heuristic methods are easy to understand and implement. The limitations of the heuristic methods include the inability to find the global or exact optima and to locate a series of optima, as well as consideration of a linear relationship rather than a discrete time–cost relationship for completing an activity (Feng et al., 1997). The mathematical methods for solving the TCT problem include linear programming (Kelly, 1961; Hendrickson and Au, 1989; Pagnoni, 1990), integer programming (Meyer and Shaffer, 1963; Patterson and Huber, 1974), combination of linear programming and integer programming (Burns et al., 1996) and dynamic programming (Robinson, 1975; Elmaghraby, 1993; De et al., 1995). The mathematical methods are able to find the exact optima, but are criticized for the resultant computational burdens, complex formulations, and inability to consider a discrete time–cost relationship for completing an activity (Feng et al., 1997; Hegazy, 1999).
Genetic algorithm (GA), an evolutionary technique, has been widely applied to solve the TCT problems. Based on the relationships between duration and cost, the TCT problem was transformed into a single objective optimization so as to apply GA (Li and Love, 1997; Hegazy, 1999; Li et al., 1999). According to the weighting approach (Gen and Cheng, 2000), the two objectives were combined into a single objective by assigning weights to objectives and a modified adaptive weighting GA method was developed (Zheng et al., 2004, 2005). Nevertheless, transformation to a single objective optimization could not minimize project duration and cost simultaneously. Though the modified adaptive weighting GA method could avoid some problems such as weighting sensitivity and a single optimum instead of a set of optimal solutions, a few non-dominated solutions could be identified (Zheng et al., 2004). Feng et al. (1997) developed a multiobjective GA that could provide a set of optimal solutions for the TCT problem. The multi-objective GA is able to overcome the abovementioned deficiencies caused by other methods, such as the inability of finding the exact optima, heavy computation burden, difficulty in weighting objectives and determining only a few optima (Feng et al., 1997).
Particle swarm optimization (PSO) developed by Kennedy and Eberhart (1995) is another kind of evolutionary technique, which simulates the social behaviour of bird flocking to a desired place. Similar to GAs, PSO starts with a set of initial solutions and repetitively updates them. In PSO each particle adjusts its flying according to the experience of its own and others. In addition to the similar advantages of GAs, including computational feasibility and effectiveness, PSO shows its uniqueness such as easy
implementation and consistency in performance (Eberhart and Shi, 1998; Robinson et al., 2002; Salman et al., 2002). PSO has been utilized to solve the resource-constrained project scheduling (RCPS) problem (Zhang and Li, 2005; Zhang et al., 2005). However, PSO has seldom been applied for solving the TCT problems.
In this paper, the mechanism of PSO is adopted to explore a new methodology to search for Pareto optimal solutions for the TCT problems. A combined scheme-based multi-objective particle swarm optimization (CSMOPSO) is proposed, in which sparse-degree and roulette-wheel selection are combined to determine the global best for guiding particle-flying. The candidate TCT solutions in terms of a set of construction methods associated with different duration and cost for all activities are represented using the multidimensional particles. A discrete time–cost relationship for completing each activity is considered. This study aims to propose an alternative solving methodology for the construction TCT problems by means of PSO, thus helping industry practitioners plan construction methods with optimal balance between time and cost.
Description of TCT problems
In a construction project, the duration of each activity is related to the adopted construction method composed of use policies of resources and construction technologies. An activity may require additional or more efficient resources or overtime to increase productivity or shorten completion time. For example, high-skilled manpower, more efficient concrete pump and even overtime may be adopted to speed up the progress of an activity of concreting, which should lead to additional cost. Further, the activity of concreting can be carried out using the following methods: (1) cast on site using a local batch plant, crane, bucket and crew; (2) cast on site using ready mix concrete transported from a nearby plant and pipe pumping; and (3) installing prefabricated elements transported from a plant. The three technologies also lead to different cost including direct cost for manpower, equipment and materials as well as indirect cost for transformation, installing and management.
Various construction methods correspond to different project duration and total cost. Normally, more productive construction methods are adopted to reduce duration while additional cost is required for more productive resources or technologies. However, there are some activities that by their very nature cannot be shortened even if additional cost is incurred. In any case, each relationship between time and cost actually reflects the advantage or disadvantage of the construction method to complete an activity. Because of the optional construction methods for an activity, it is assumed that there exists a discrete relationship between duration and cost for completing an activity. In this study, a set of construction methods corresponding to various extents of duration and cost for each activity is considered to be selected through the proposed multi-objective optimization methodology.
Assuming that the time and cost for various construction methods to complete an activity are known, the contractors or engineers need to select appropriate construction methods for all activities in a project with balanced time–cost tradeoff (TCT). The construction TCT problem is a multi-objective optimization with objectives of minimizing project duration and total cost. However, the magnitude of the search space for the multi-objective optimization makes it difficult or time-consuming for general practitioners to search for the optimal solution.
Concept of Pareto-oriented multi-objective optimization
In most of the multi-objective optimization problems, the multiple objectives may conflict with each other; for example, reduction in the project duration is achieved through additional cost for more productive resources or technologies. It is normally impossible to achieve one objective without sacrificing at least one or more objectives. The competing objectives have to be traded off against one another while seeking a solution. For instance, there exists tradeoff between project duration and cost when searching for the highest efficiency. The multi-objective optimization problem should not have a unique solution that makes all objective functions be the optimum at the same time. There exist a series of solutions that are non-dominated by each other. In other words, these solutions cannot be further optimized for one or several objectives and cannot be further worsened for other objectives. For example, a
decision vector X = (x1 …, xN) in the search space is said to be a non-dominated solution if there does not exist another decision vector X* = (x*1 …, x*N) that makes fi(*X) < fi(X). Herein fi( ) (i = 1 to D) denotes one objective function and D denotes the number of objectives. All such non-dominated solutions make up Pareto front {S} of a multi-objective optimization problem (Coello, 1999). No member of the Pareto front is dominated by any other member. The goal of multi-objective optimization is to locate the Pareto front of the non-dominated solutions.
For the TCT problems, there are two objectives: minimization of project duration and minimization of cost. The objective functions f1(X) and f2(X) mean the mechanism to obtain the fitness (i.e. project duration and cost) for the TCT problems based on the decision vector X = (x1 …, xN). Solving the TCT problem is to determine the Pareto front composed of a series of optimal solutions, i.e. an optimal set of construction methods for all activities.
The heuristic methods, the mathematical methods and the weighting methods that transform multiple objectives into a single objective could not provide a set of non-dominated solutions that make up the Pareto front for the multi-objective optimization problem. On the other hand, the evolutionary techniques such as GA and PSO that adopt the Pareto concept are able to determine the Pareto front composed of the nondominated solutions (Coello, 1999). A multi-objective particle swarm optimization method for determining the Pareto front is applied in this paper.
Introduction to multi-objective particle swarm optimization (MOPSO)
With the successful application of PSO to singleobjective optimization problems, multi-objective particle swarm optimization (MOPSO) has been developed to solve the multi-objective optimization problems.
Basic concept of PSO
PSO simulates a social behaviour such as bird flocking to a promising position for certain objectives in a multidimensional space (Kennedy and Eberhart, 1995; Eberhart and Shi, 2001). Like an evolutionary algorithm, PSO conducts a search using a population (called swarm) of individuals (called particles), the positions of which are updated from iteration to iteration. A particle is treated as a point in a multidimensional space and the status of a particle is characterized by its position and velocity (Kennedy and Eberhart, 1995). The position of each particle represents a candidate solution to the problem at hand, resembling the chromosome of GA. A swarm of particles flies along the trajectory that is updated based on the following formulas (Kennedy and Eberhart, 1995):
where Xi(t) = {xi1(t), …, xiN(t)} denotes the N-dimension position (a N-dimension vector) for particle i in iteration t, while Vi(t) = {vi1(t) …, viN(t)} denotes the velocity for particle i in iteration t. i = 1, …, P and P means the total number of the particles in a swarm, called population size; t = 1, …, T and T means the maximum iteration; XiL ={xiL1,K,xiNL } denotes the
individual best (ibest) position the particle i finds so far,
while XG ={x1G ,K,xGN } denotes the global best (gbest)
position the swarm finds so far. c1 and c2 are the positive constants (namely learning factors), while r1 and r2 are random numbers between 0 and 1; w(t) is the inertia weight for controlling the impact of the previous velocities on the current velocity.
Equation (1) determines a particle’s new velocity according to its previous velocity and the distances from its current position to its ibest and the gbest. Equation (2) determines a particle’s new position by utilizing its ibest and the gbest. Equations (1) and (2) also reflect the information-sharing mechanism. PSO shares some characteristics with a general evolutionary method such as GA, including population initialization, repetitive search process and fitness evaluating. The updating mechanism of PSO is analogous to the function of crossover for GA. However, PSO allows individuals to benefit from their past experiences whereas GA normally uses the current populations of survivals. In addition, the PSO updating mechanism can be formulated to facilitate the ease of implementation (Eberhart and Shi, 1998).
Owing to the high speed of convergence, PSO has obtained success in solving single-objective optimization problems. PSO is also considered to be particularly suitable for the multi-objective optimization problems (Kennedy and Eberhart, 2001). Many attempts have been made to modify the single-objective PSO to suit multi-objective optimization problems.
The simplest category of approaches for multi-objective PSO is the aggregating methodology that assigns a weight to each objective and combines the multiple objectives into a single one (Parsopoulos and Vrahatis, 2002; Baumgartner et al., 2004). In other words, the multi-objective PSO is transformed to the single PSO. However, the disadvantage of this approach is the lack of a mechanism for assigning the weights to reflect different levels of importance and scaling magnitude for various objectives.
Another category of approach for multi-objective PSO is the Pareto-oriented methodology that focuses on determination of the individual (ibest) and global best (gbest) based on the Pareto concept. The particleflying for PSO is guided by the ibest for each particle as well as the gbest of the entire swarm. The ibest and gbest need to be determined repetitively during PSO.
Because the optimal solution for multi-objective optimization is a set of non-dominated solutions instead of a single solution, determination of the ibest and gbest from the set of non-dominated solutions is crucial to the Pareto-oriented multi-objective PSO.
Determination of the ibest for each particle is straightforward. The ibest for particle i, denoted as XiL, should be updated only when the new position of particle i is non-dominated and it dominates its previous ibest (XiL ). Determination of the gbest for each particle from the current Pareto front (i.e. the set of non-dominated solutions) is relatively complex. Considering that the gbest may be selected differently for each particle, the gbest should be denoted separately for each particle, such as XGi for particle i instead of XG for the entire  ii
swarm in single-objective PSO. Various possible schemes have been proposed to determine the gbest from the set of non-dominated solutions. The most common schemes include random selection of gbest (Coello and Lechuga, 2002; Alvarez-Benitez et al., 2005; Cagnina et al., 2005) and information-based selection of gbest (Ray and Liew, 2002; Raquel and Naval, 2005; Sierra and Coello, 2005).
The random scheme gives all non-dominated solutions the same probability to be selected as the gbest for a particle. The random scheme is able to promote convergence so as to avoid being trapped at local optima (Coello et al., 2004). On the other hand, the information-based scheme considers additional information such as density or crowing distance when determining the gbest. The information-based scheme is able to promote diversity of the solutions by attracting the swarm towards sparsely populated regions (AlvarezBenitez et al., 2005). The density, or alternatively called sparse-degree in this paper, in terms of the perimeter of the rectangle formed by the nearest neighbours as the vertices (see Figure 1) is often adopted; the non-dominated solution (e.g. Xk) with a larger value of
Figure 1	Sparse-degree in terms of perimeter of a rectangle
the sparse-degree has the priority to be selected as the gbest.
Figure 1 Sparse-degree in terms of perimeter of a rectangleIt is noted that the general multi-objective particle swarm optimization (MOPSO) methods individually adopt a random scheme or an information-based scheme to promote convergence or diversity (sparsedegree) respectively. The general MOPSO methods make it difficult to keep convergence and diversity simultaneously. So a combined scheme that takes advantage of the information-based scheme and the random scheme is expected to be developed.
A combined scheme to determine global best
The sparse-degree is herein considered to be measured in a straightforward manner, that is, in terms of the average Euclidean distance instead of perimeter (Figure 2).
For instance, dk, k − 1 and dk, k + 1 respectively represent the Euclidean distance from the non-dominated solution Xk to the two adjacent neighbours (i.e. Xk−1 and Xk+1) on both sides. The average distance dk = 0.5 (dk, k−1 + dk, k+1) serves as the sparse-degree around the solution Xk. For the first and last solutions X1 and Xn, the sparse-degree is just the distance from them to the only one adjacent solution. Therefore d1 = d1,2 and dn = dn, n−1. The distance is computed as follows:
where Figure 2 Sparse-degree in terms of Euclidean distance for a solutionf1 (Xk) and f2 (Xk) respectively mean the fitness values for objective 1 (e.g. project duration) and objective 2 (e.g. cost) based on the solution Xk.
Such a sparse-degree estimation can be used by the information-based scheme to determine the gbest from a set of non-dominated solutions, thus promoting diversity. In order to promote both convergence and
Figure 2 Sparse-degree in terms of Euclidean distance for a solution
diversity, a roulette-wheel selection is applied to determine the gbest by regarding the sparse-degree of each solution as the probability to be selected. Unlike the random selection method that randomly determines the gbest, the roulette-wheel selection determines the gbest based on the probability of each solution. The sparse-degree for each non-dominated solution should be normalized and the total sum of the normalized sparse-degree is equal to 1.0. The size of the section in the roulette wheel is proportional to the sparse-degree for every non-dominated solution; the bigger the sparse-degree is, the larger the section is, and the more likely the corresponding solution is selected as the gbest.
Moreover, unlike some schemes considering parts of the non-dominated solutions to be recorded so as to reduce the time of scanning all solutions (Coello et al., 2004), all non-dominated solutions are herein recorded and referred for determining the gbest in consideration of the property of the current computer. According to the sparse-degree estimation and the roulette-wheel selection, the procedure of the combined scheme to determine the gbest from a set of non-dominated solutions is presented as follows:
– Update the individual best (ibest) XiL for the particle i only when its new position is nondominated and dominates the particle i’s current individual best XiL.
– Update the Pareto front stored as {S} if the new ibest XiL for particle i is dominated by any existing optimal solutions in the Pareto front.
– If XiL is non-dominated, then add the new non-dominated solution to the Pareto front {S}.
– Then find out the existing solutions that are dominated by this new solution and remove them from the stored Pareto front {S}.
– Navigate the stored Pareto front {S} for the optimal particle-represented solutions (i.e. positions), and then calculate the sparse-degree (i.e. dk) for each optimal particle-represented solution.
– Regarding the sparse-degree as the fitness of each particle-represented solution, select the global best XGi for the particle i according to
ii the roulette-wheel selection method.
At each iteration, determination of the global best gbest for each particle will begin only after the ibest of
every particle has been specified so that updating of the Pareto front is complete for the current iteration.
The proposed combined scheme combines the sparse-degree estimation and roulette-wheel selection to determine the gbest so as to promote both convergence and diversity for MOPSO. The advantages of the information-based scheme as well as the roulette-wheel selection that outperforms the random scheme are taken. In addition, all non-dominated solutions are to be considered when determining the gbest.
Combined scheme-based MOPSO (CSMOPSO) for TCT problems
Based on the combined scheme to determine the gbest from a set of non-dominated solutions (i.e. a Pareto front), a combined scheme-based MOPSO (CSMOPSO) for solving the TCT problems will be proposed in this section.
Mapping of TCT solutions to particles
A candidate solution to the TCT problem is a combination of methods for all activities, that is, a set of activities associated with construction methods, such as
Xi = {(1, m1), (2, m2), (3, m3),…, (j, mj),…, (N, mN)}. Herein j =1 to N represents one activity j among the N activities in the construction project, while mj represents one method for activity j. The method mj is one of the corresponding options in the range of [1, Mj] and Mj is the maximum number of the method options.
As one point in a multidimensional space, each element of the multidimension position of the particle i at iteration t (i.e. Xi (t) = {xi1 (t), xi2(t),…, xiN(t)}) can stand for one activity among the N activities. Accordingly each element of the particle position can have the value that represents a method option for an activity. So a TCT solution in terms of a combination of activity-methods can be represented through a particle, with a matrix defining exactly its multidimension position Xi(t) = {xi1 (t), …, xiN (t)}. Mapping between one TCT
Figure 3	Particle-represented solution for the TCT problem
solution and the particle representation is described in Figure 3. The goal of solving the TCT problem, i.e. finding the optimal combination of activity-methods so as to minimize both project duration and cost, can be achieved through searching a particle position with a fitness of optimal time–cost tradeoff. The fitness for the two objectives, i.e. project duration and total cost, is obtained from the scheduling (rather than objective functions f1(Xi) and f2(Xi) by adopting the particlerepresented solution (i.e. a set of activity-methods) and the precedence relationships among activities.
Figure 3 Particle-represented solution for the TCT problemThe multidimension velocity of such a particle can be denoted as Vi(t) = {vi1(t), …, viN(t)}. The individual best ibest for particle i is represented as
XiL ={xiL1,K,xiNL }, while the global best gbest that may be different for each particle is represented as
XiG ={xiG1,K,xiNG }. Considering the method option range for each activity, the search constraint (i.e.
[xminj ,xmaxj ](j =1to N)) of the particle-represented solution Xi (t) corresponds to the method option range
[1, Mj] (j = 1 to N), that is, xjmin = 1 and xjmax = Mj. The particle-represented solutions outside [1, Mj] are infeasible, so the particles that fly outside the search constraint should be adjusted as follows:
(t)}, 	should 	be 	also 	subject 	to 	a 	limit
[vminj ,vmaxj ](j =1to N) so as to prevent explosion (Clerc and Kennedy, 2002). Based on the search constraint
[xminj ,xmaxj ](j =1to N)) for the particle-represented solutions, the velocity constraint can be defined as:
vminj =−xminj and vmaxj = xmaxj . So the particle velocity should be subject to the constraint [–Mj, Mj] (j =1 to N).
The particle velocity that is beyond this constraint should be adjusted as follows:
Flowchart of CSMOPSO
According to the mapping between the TCT solutions and the particles as well as the combined scheme-based multi-objective PSO, the flowchart of the CSMOPSO is presented in Figure 4, which can help implement the
Figure 4 Flowchart of the proposed CSMOPSOPlease note that each element (i.e. xij(t), I = 1 to P and j = 1 to N) of the particle-represented TCT solution (i.e. Xi(t)) should be rounded off to an integer to reflect the method index for each activity. P denotes the population size, that is, the number of particles in the swarm. N denotes the total number of activities of the construction project under study. t denotes the index number of the iteration. Mj (j =1 to N) means the maximum number of the method options for activity j. Updating the particle velocity Vi(t) and position Xi(t) is achieved through Equations (1) and (2). The particle velocity Vi(t) and position Xi(t) that are beyond the corresponding constraints should be adjusted based on the abovementioned method. Determination of the individual best (ibest) and global best (gbest) for each particle from a set of non-dominated solutions is achieved through the proposed combined scheme. The ‘stop criteria’ include: (1) maximum number of iterations since last updating of the non-dominated solutions; and (2) maximum total number of iterations. According to the flowchart, the proposed CSMOPSO has been implemented in Visual C++. No additional information for the prototype system is provided here in the consideration of the length limitation of the paper.
In order to verify the performance of the proposed CSMOPSO, computational experiments as well as comparisons with a random selection-based multiobjective PSO (RSMOPSO) and a multi-objective genetic algorithm (MOGA) are carried out. The RSMOPSO resembles the proposed CSMOPSO except that the global best (gbest) is randomly selected. The MOGA is based on the methodology of Feng et al. (1997). The RSMOPSO and MOGA are also implemented in Visual C++ just for the purpose of comparisons.
To verify the performance of the proposed CSMOPSO, exact multi-objective optimal solutions (i.e. true Pareto front) for the examples are required. Therefore, two examples that have been used by Burns et al. (1996) and Feng et al. (1997) and have the exact solutions are adopted.
Example 1 has seven activities (Figure 5) and the optional methods associated with various durations and costs are shown in Table 1. Example 2 has 18 activities (Figure 6) and the optional methods associated with various durations and costs are shown in Table 2.
Figure 65 Activity-on-node network for example 2Some parameters for experimenting MSMOPSO1 need to be specified. The inertia weight w(t) is given a constant value of 0.8 according to the conclusion (Eberhart and Shi, 1998) that 0.8 is suitable to the case vmaxj > 3 and the current situation that the option range is normally more than 3 so that vmaxj (= xmaxj )> 3. Considering that different learning factors c1 and c2 cause a little bit of difference (Trelea, 2003), a value of 1.0 is assigned as usual. The population size (i.e. the number of particles in the swarm) P is usually taken as the value close to the number of non-dummy activities (i.e. N) in the project under study, considering that more particles may increase searching success but similarly require more evaluation runs (Trelea, 2003). Therefore the P is given the values of 10 and 20 respectively for the two examples. The termination signals, i.e. maximum number of iterations since last updating of the non-dominated solutions and maximum total number of iterations, are given the values of 50 and 400 respectively for the two examples.
The parameters for the RSMOPSO are the same as those for the CSMOPSO. The parameters for the MOGA are specified as follows: the population size, crossover probability, and mutation probability are given the values of 100, 0.4 and 0.02, respectively. The termination signals are also given the same values as those for the CSMOPSO. Fifty runs of experiments for each method and each example are conducted so as to average the qualitative results.
Performance analysis
In order to investigate the performance of a multiobjective optimization algorithm, three quantitative metrics are usually used (Zitzler et al., 2000). The three metrics respectively assess the convergence degree, diversity (sparse-degree of the non-dominated solutions) and speed of convergence.
Figure 4	Flowchart of the proposed CSMOPSO
Figure 5	Activity-on-node network for example 1
The first metric considers the generational distance (GD) (Zitzler et al., 2000) and is defined as:
where n is the number of solutions in the obtained Pareto front and di is the Euclidean distance (in the
Figure 6	Activity-on-node network for example 2 Table 1	Various options for example 1



two-objective space) between solution i in the obtained Pareto front and the nearest solution in the true Pareto front. The generational distance (GD) measures the convergence degree. A smaller value indicates a higher convergence degree, while a zero value means complete convergence.
The second metric considers the range variance (RV) of neighbouring solutions (Zitzler et al., 2000) and is defined as:
where di = minj (|f1(Xi) − f1(Xi)| + |f2(Xj) − f2(Xj)|); i, j = 1, …, n, d is the mean of all di, f1 (Xi) and f2(Xi) are respectively the fitness values of the first objective (i.e. project duration) and is the second objective (i.e. total cost) for the solution i. The range variance (RV) measures diversity of the non-dominated solutions. A smaller value indicates a higher diversity degree and a value of zero indicates that all the non-dominated solutions are uniformly distributed.
The third metric is the computation time required to get the final results by the CSMOPSO. A shorter computation time indicates a faster convergence process. It should be noted that comparison of computation time must be under the condition that these multi-objective optimization systems be executed within the same hardware environment.
The average values of the generational distance (GD), range variance (RV) and computation time (CT) based on 50 runs for each case and the corresponding standard deviations (Std.dev) are listed in Table 3. It is shown that the proposed CSMOPSO has the smallest values of GD among the three methods and obviously much smaller GD than those of the RSMOPSO, meaning that the CSMOPSO has the highest convergence degree among the three methods. Table 3 shows that the CSMOPSO results in smaller values of RV than those of the RSMOPSO and almost the same as those of the MOGA, meaning that the CSMOPSO outperforms the RSMOPSO with regard to diversity. Table 3 also shows that the CSMOPSO spends less computation time (CT) than the RSMOPSO and MOGA, meaning that the CSMOPSO has the fastest speed of convergence among the three methods.
Table 2	Various options for example 2	Table 2	(Continued)





In summary, the above analyses demonstrate that the CSMOPSO performs the best among the three methods, particularly much better than the RSMOPSO. These demonstrated performances actually reflect the respective advantages of the information-based scheme and the roulette-wheel selection superior to the random scheme, which are combined by the CSMOPSO to determine the gbest during the searching process.
Use of obtained solutions
The final results the CSMOPSO provides for the two examples are two series of non-dominated solutions (i.e. the Pareto fronts) shown in Figure 7 and Figure 8, each solution corresponding to a selection of construction methods for each activity in the two projects. The series of non-dominated solutions reflect a discrete and balanced relationship between time (project duration) and cost (total cost) to complete the projects. According to the series of non-dominated solutions, practitioners (e.g. contractors or engineers) are able to select a set of construction methods for each activity in the construction projects based on the actual situations such as duration requirement and investment limitation.
Figure 87 Pareto front (a set of non-dominated solutions) for example 2For instance, if the practitioners accept the result1 with project duration 78 and total cost 107 500, one of the series of non-dominated solutions (Figure 7) for example 1, then the selection of construction methods for the seven activities can be determined as shown in Table 4. If the result with project duration 110 and total cost 106 270 for example 2 is desirable among the series of non-dominated solutions (Figure 8), then the practitioners can select the construction methods for the 18 activities as shown in Table 5.
It should be noted that the cost within a TCT solution may be just the direct cost rather than the total cost for completing the construction project if the

Computation time (minutes)
Figure 7	Pareto front (a set of non-dominated solutions) for example 1
Table 4	One selection of construction methods for example 1
Activity index
Construction method index
inputted cost for each activity contains just the direct cost. Then the total cost can be obtained by summing up the direct cost and the indirect that is usually assumed to be proportional to the project duration. The availability of a set of non-dominated solutions is enough and convenient to consider various indirect cost rates without experimenting with multi-objective optimization.
Further study
To utilize the proposed CSMOPSO for solving the construction TCT problems requires the data of time and cost associated with various construction methods for various construction activities. Therefore it is necessary to provide contractors or engineers with a convenient means to obtain these data. The study on such issues is being carried out and is simply introduced herein.
Collection of data
The time and cost associated with various construction methods for an activity are collected by means of practical investigation, experts’ investigation and referring
Figure 8	Pareto front (a set of non-dominated solutions) for example 2
Table 5	One selection of construction methods for example 2
Activity index
Construction method index
to historical records. The activities should include not only those in building construction but also those for fundamental projects (road, bridge and tunnel construction). Various activities may consider different construction methods according to their characteristics. Some may consider only different assignments of equipment and manpower; some may consider overtime and different construction technologies. For example, activity excavation may consider various construction methods consisting of different equipment (e.g. excavator); activity girder erection may consider construction methods with combinations of different cranes and crew sizes; activity concreting may consider construction methods with various assignments of equipment (e.g. concrete pump) and technologies (e.g. cast on site and installing prefabricated). It is necessary to consider as many options of construction methods as possible. In addition, the volume or amount of work that each activity involves also determines the actually required time and cost. Therefore, information relating to not only the time and cost associated with various construction methods but also the volume or amount of work the investigated activity actually involves should be collected.
Platform to handle collected data
Once the relevant data are collected, a computer platform is required to help users handle the collected data and provide the parameters suitable for the current project under study. This platform should have the capability to input and store the collected data through practical cases, experts and historical records. In addition, this platform should be able to trace the collected data and find out the suitable parameters according to the actual projects. Moreover, some calculations are to be operated to get the actual parameters based on the time–cost relationship for a unit-volume work of activity and the actual volume the current activity involves. Finally, this platform should be user-friendly and extendable for further development and utilization.
A multi-objective particle swarm optimization (MOPSO) methodology based on a combined scheme for determining the global best (gbest) has been proposed for solving the construction time–cost tradeoff problem. In consideration of Pareto-oriented optimization and the need of diversity and convergence, a scheme that combines the sparse-degree and roulette-wheel selection is developed to determine the gbest from a set of non-dominated solutions (i.e. a Pareto front). The framework of the combined schemebased multi-objective particle swarm optimization (CSMOPSO) has been presented, including mapping between the candidate TCT solutions and the multidimension particles as well as the flowchart of the CSMOPSO. The proposed method has been investigated through computational analyses based on two illustrative examples and comparisons with another multi-objective PSO (RSMOPSO) and a multiobjective GA (MOGA). The computational analyses demonstrate that the CSMOPSO outperforms the RSMOPSO and MOGA with regard to convergence degree, diversity and speed of convergence.
The research provides an alternative PSO-based methodology to solve the construction TCT problems, that is, determining an optimal set of construction methods for all activities which corresponds to the minimum project duration and cost. The proposed CSMOPSO is expected to assist researchers or practitioners in effectively analysing and planning construction projects. Further studies can be directed towards development of a platform to handle the collected data, considering the uncertain activity duration and cost as well as adding more objectives such as construction quality to the optimization process.
